{"version":3,"file":"ballchasing.js","sources":["../src/BallChasingAPI.ts"],"sourcesContent":["import fetch from \"node-fetch\";\nimport * as fs from \"fs\";\nimport * as FormData from \"form-data\";\n\nexport type Visibility = \"public\" | \"unlisted\" | \"private\"\n\nexport type Playlist =\n    \"unranked-duels\" |\n    \"unranked-doubles\" |\n    \"unranked-standard\" |\n    \"unranked-chaos\" |\n    \"private\" |\n    \"season\" |\n    \"offline\" |\n    \"ranked-duels\" |\n    \"ranked-doubles\" |\n    \"ranked-solo-standard\" |\n    \"ranked-standard\" |\n    \"snowday\" |\n    \"rocketlabs\" |\n    \"hoops\" |\n    \"rumble\" |\n    \"tournament\" |\n    \"dropshot\" |\n    \"ranked-hoops\" |\n    \"ranked-rumble\" |\n    \"ranked-dropshot\" |\n    \"ranked-snowday\" |\n    \"dropshot-rumble\" |\n    \"heatseeker\"\n\nexport type MatchResult =  \"win\" | \"loss\"\n\nexport type Rank =\n    \"unranked\" |\n    \"bronze-1\" |\n    \"bronze-2\" |\n    \"bronze-3\" |\n    \"silver-1\" |\n    \"silver-2\" |\n    \"silver-3\" |\n    \"gold-1\" |\n    \"gold-2\" |\n    \"gold-3\" |\n    \"platinum-1\" |\n    \"platinum-2\" |\n    \"platinum-3\" |\n    \"diamond-1\" |\n    \"diamond-2\" |\n    \"diamond-3\" |\n    \"champion-1\" |\n    \"champion-2\" |\n    \"champion-3\" |\n    \"grand-champion\"\n\nexport type SortBy = \"replay-date\" | \"upload-date\"\n\nexport type SortDir = \"asc\" | \"desc\"\n\nexport interface ListReplaysArgs {\n    title?: string\n    playerName?: string\n    playerId?: string\n    playlist?: Playlist\n    season?: string\n    matchResult?: MatchResult\n    minRank?: Rank\n    maxRank?: Rank\n    pro?: boolean\n    uploader?: string\n    group?: string\n    // This is actually an enum from GET /maps\n    map?: string\n    // RFC3339 Format\n    createdBefore?: string\n    createdAfter?: string\n    replayDateAfter?: string\n    replayDateBefore?: string\n    count?: number\n    sortBy?: SortBy\n    sortDir?: SortDir\n}\n\nexport interface DeleteReplayArgs {\n    id: string\n}\n\nexport interface PatchReplayArgs {\n    id: string\n    // the patch data, for example, {\"title\":\"patched title\"}\n    patch: {\n        [key: string]: string\n    }\n}\n\nexport interface DownloadReplayArgs {\n    id: string\n}\n\nexport interface GetReplayArgs {\n    id: string\n}\n\nexport interface CreateGroupArgs {\n    name: string\n    parent?: string\n    playerIdentification: \"by-id\" | \"by-name\"\n    teamIdentification: \"by-distinct-players\" | \"by-player-clusters\"\n}\n\nexport interface ListGroupsArgs {\n    name?: string\n    creator?: string\n    group?: string\n    createdBefore?: string\n    createdAfter?: string\n    count?: number\n    sortBy?: SortBy\n    sortDir?: SortDir\n}\n\nexport interface DeleteGroupArgs {\n    id: string\n}\n\nexport interface PatchGroupArgs {\n    id: string\n    // the patch data, for example, {\"title\":\"patched title\"}\n    patch: {\n        [key: string]: string\n    }\n}\n\nexport interface GetGroupArgs {\n    id: string\n}\n\nexport class BallChasingAPI {\n\n    private readonly _apiKey;\n    private readonly _baseURL;\n\n    constructor(apiKey: string) {\n        this._apiKey = apiKey;\n        this._baseURL = new URL(\"https://ballchasing.com/api\")\n    }\n\n    /**\n     * Create the authorization headers needed to call the\n     * ballchasing API.\n     * @private\n     */\n    private authHeaders() {\n        return {\"Authorization\": this._apiKey};\n    }\n\n    /**\n     * Make a request to the ballchasing API. This method will\n     * check the response for errors.\n     * @param url\n     * @param fetchArgs Any extra fetch args\n     * @param headers Any extra headers\n     * @private\n     */\n    private async request(url: URL, fetchArgs?: RequestInit, headers?: HeadersInit) {\n        try {\n            const args: RequestInit = {\n                headers: {\n                    ...this.authHeaders(),\n                    ...headers\n                },\n                ...fetchArgs\n            }\n\n            // @ts-ignore\n            const res = await fetch(url, args);\n            const json = await res.json();\n\n            return {response: res, data: json};\n\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    /**\n     * Checks if\n     * 1) Your API key is correct\n     * 2) If ballchasing API is reachable\n     */\n    async ping() {\n        try {\n            return await this.request(this._baseURL);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Upload a replay\n     *\n     * @param filepath\n     * @param groupId\n     * @param visibility\n     */\n    async uploadReplay(filepath: string, groupId?: string, visibility?: Visibility) {\n        try {\n            const endpoint = new URL(\"/api/v2/upload\", this._baseURL);\n\n            if (visibility) {\n                endpoint.searchParams.set(\"visibility\", visibility);\n            }\n\n            if (groupId) {\n                endpoint.searchParams.set(\"group\", groupId);\n            }\n\n            const stats = fs.statSync(filepath);\n            const stream = fs.createReadStream(filepath);\n\n            const formData = new FormData();\n            formData.append(\"file\", stream, {knownLength: stats.size});\n\n            const args = {method: \"POST\", body: formData};\n\n            // @ts-ignore\n            return await this.request(endpoint, args);\n\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async getMaps() {\n        try {\n            const endpoint = new URL(\"/api/maps\", this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async listReplays(args: ListReplaysArgs) {\n        try {\n\n            const endpoint = new URL(\"/api/replays\", this._baseURL);\n\n            if (args.title) {\n                endpoint.searchParams.set(\"title\", args.title);\n            }\n\n            if (args.playerName) {\n                endpoint.searchParams.set(\"player-name\", args.playerName);\n            }\n\n            if (args.playerId) {\n                endpoint.searchParams.set(\"player-id\", args.playerId);\n            }\n\n            if (args.playlist) {\n                endpoint.searchParams.set(\"playlist\", args.playlist);\n            }\n\n            if (args.season) {\n                endpoint.searchParams.set(\"season\", args.season);\n            }\n\n            if (args.matchResult) {\n                endpoint.searchParams.set(\"match-result\", args.matchResult);\n            }\n\n            if (args.minRank) {\n                endpoint.searchParams.set(\"min-rank\", args.minRank);\n            }\n\n            if (args.maxRank) {\n                endpoint.searchParams.set(\"max-rank\", args.maxRank);\n            }\n\n            if (args.pro) {\n                endpoint.searchParams.set(\"pro\", \"true\");\n            }\n\n            if (args.uploader) {\n                endpoint.searchParams.set(\"uploader\", args.uploader);\n            }\n\n            if (args.group) {\n                endpoint.searchParams.set(\"group\", args.group);\n            }\n\n            if (args.map) {\n                endpoint.searchParams.set(\"map\", args.map);\n            }\n\n            if (args.createdBefore) {\n                endpoint.searchParams.set(\"created-before\", args.createdBefore);\n            }\n\n            if (args.createdAfter) {\n                endpoint.searchParams.set(\"created-after\", args.createdAfter);\n            }\n\n            if (args.replayDateBefore) {\n                endpoint.searchParams.set(\"replay-date-before\", args.replayDateBefore);\n            }\n\n            if (args.replayDateAfter) {\n                endpoint.searchParams.set(\"replay-date-after\", args.replayDateAfter);\n            }\n\n            if (args.count) {\n                endpoint.searchParams.set(\"count\", args.count.toString());\n            }\n\n            if (args.sortDir) {\n                endpoint.searchParams.set(\"sort-dir\", args.sortDir);\n            }\n\n            if (args.sortBy) {\n                endpoint.searchParams.set(\"sort-by\", args.sortBy);\n            }\n\n            return await this.request(endpoint);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async getReplay(args: GetReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}`, this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async patchReplay({id, patch}: PatchReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${id}`, this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"PATCH\", body: JSON.stringify({...patch})},\n                {\"Content-Type\": \"application/json\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async deleteReplay(args: DeleteReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}`, this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"DELETE\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async downloadReplay(args: DownloadReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}/file`, this._baseURL);\n            return await fetch(endpoint, {\n                headers: {\n                    ...this.authHeaders()\n                }\n            });\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async createGroup(args: CreateGroupArgs) {\n        try {\n            const endpoint = new URL(\"/api/groups\", this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"POST\", body: JSON.stringify({...args})},\n                {\"Content-Type\": \"application/json\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async listGroups(args: ListGroupsArgs = {}) {\n        try {\n            const endpoint = new URL(\"/api/groups\", this._baseURL);\n\n            if (args.name) {\n                endpoint.searchParams.set(\"name\", args.name);\n            }\n\n            if (args.count) {\n                endpoint.searchParams.set(\"count\", args.count.toString());\n            }\n\n            if (args.creator) {\n                endpoint.searchParams.set(\"creator\", args.creator);\n            }\n\n            if (args.createdBefore) {\n                endpoint.searchParams.set(\"created-before\", args.createdBefore);\n            }\n\n            if (args.createdAfter) {\n                endpoint.searchParams.set(\"created-after\", args.createdAfter);\n            }\n\n            if (args.sortBy) {\n                endpoint.searchParams.set(\"sort-by\", args.sortBy);\n            }\n\n            if (args.sortDir) {\n                endpoint.searchParams.set(\"sort-dir\", args.sortDir);\n            }\n\n            if (args.group) {\n                endpoint.searchParams.set(\"group\", args.group);\n            }\n\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async getGroup(args: GetGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${args.id}`, this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async deleteGroup(args: DeleteGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${args.id}`, this._baseURL);\n            return await this.request(endpoint, {method: \"DELETE\"});\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async patchGroup({id, patch}: PatchGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${id}`, this._baseURL);\n            return await this.request(endpoint, {\n                method: \"PATCH\",\n                body: JSON.stringify({...patch})\n            }, {\"Content-Type\": \"application/json\"});\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n}"],"names":["BallChasingAPI","constructor","apiKey","_apiKey","_baseURL","URL","authHeaders","request","url","fetchArgs","headers","args","res","fetch","json","response","data","e","Error","ping","uploadReplay","filepath","groupId","visibility","endpoint","searchParams","set","stats","fs","statSync","stream","createReadStream","formData","FormData","append","knownLength","size","method","body","getMaps","listReplays","title","playerName","playerId","playlist","season","matchResult","minRank","maxRank","pro","uploader","group","map","createdBefore","createdAfter","replayDateBefore","replayDateAfter","count","toString","sortDir","sortBy","getReplay","id","patchReplay","patch","JSON","stringify","deleteReplay","downloadReplay","createGroup","listGroups","name","creator","getGroup","deleteGroup","patchGroup"],"mappings":"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"}