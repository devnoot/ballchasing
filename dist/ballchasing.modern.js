import e from"node-fetch";import*as a from"fs";function t(){return(t=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var r="object"==typeof self?self.FormData:window.FormData,s=Object.assign(Object.create(null),r,{default:r});class o{constructor(e){this._apiKey=e,this._baseURL=new URL("https://ballchasing.com/api")}authHeaders(){return{Authorization:this._apiKey}}async request(a,r,s){try{const o=t({headers:t({},this.authHeaders(),s)},r),c=await e(a,o),n=await c.json();return{response:c,data:n}}catch(e){throw new Error(e)}}async ping(){try{return await this.request(this._baseURL)}catch(e){throw e}}async uploadReplay(e,t,r){try{const o=new URL("/api/v2/upload",this._baseURL);r&&o.searchParams.set("visibility",r),t&&o.searchParams.set("group",t);const c=a.statSync(e),n=a.createReadStream(e),i=new s;i.append("file",n,{knownLength:c.size});const h={method:"POST",body:i};return await this.request(o,h)}catch(e){throw e}}async getMaps(){try{const e=new URL("/api/maps",this._baseURL);return await this.request(e)}catch(e){throw e}}async listReplays(e){try{const a=new URL("/api/replays",this._baseURL);return e.title&&a.searchParams.set("title",e.title),e.playerName&&a.searchParams.set("player-name",e.playerName),e.playerId&&a.searchParams.set("player-id",e.playerId),e.playlist&&a.searchParams.set("playlist",e.playlist),e.season&&a.searchParams.set("season",e.season),e.matchResult&&a.searchParams.set("match-result",e.matchResult),e.minRank&&a.searchParams.set("min-rank",e.minRank),e.maxRank&&a.searchParams.set("max-rank",e.maxRank),e.pro&&a.searchParams.set("pro","true"),e.uploader&&a.searchParams.set("uploader",e.uploader),e.group&&a.searchParams.set("group",e.group),e.map&&a.searchParams.set("map",e.map),e.createdBefore&&a.searchParams.set("created-before",e.createdBefore),e.createdAfter&&a.searchParams.set("created-after",e.createdAfter),e.replayDateBefore&&a.searchParams.set("replay-date-before",e.replayDateBefore),e.replayDateAfter&&a.searchParams.set("replay-date-after",e.replayDateAfter),e.count&&a.searchParams.set("count",e.count.toString()),e.sortDir&&a.searchParams.set("sort-dir",e.sortDir),e.sortBy&&a.searchParams.set("sort-by",e.sortBy),await this.request(a)}catch(e){throw e}}async getReplay(e){try{const a=new URL(`/api/replays/${e.id}`,this._baseURL);return await this.request(a)}catch(e){throw new Error(e)}}async patchReplay({id:e,patch:a}){try{const r=new URL(`/api/replays/${e}`,this._baseURL);return await this.request(r,{method:"PATCH",body:JSON.stringify(t({},a))},{"Content-Type":"application/json"})}catch(e){throw new Error(e)}}async deleteReplay(e){try{const a=new URL(`/api/replays/${e.id}`,this._baseURL);return await this.request(a,{method:"DELETE"})}catch(e){throw new Error(e)}}async downloadReplay(a){try{const r=new URL(`/api/replays/${a.id}/file`,this._baseURL);return await e(r,{headers:t({},this.authHeaders())})}catch(e){throw new Error(e)}}async createGroup(e){try{const a=new URL("/api/groups",this._baseURL);return await this.request(a,{method:"POST",body:JSON.stringify(t({},e))},{"Content-Type":"application/json"})}catch(e){throw new Error(e)}}async listGroups(e={}){try{const a=new URL("/api/groups",this._baseURL);return e.name&&a.searchParams.set("name",e.name),e.count&&a.searchParams.set("count",e.count.toString()),e.creator&&a.searchParams.set("creator",e.creator),e.createdBefore&&a.searchParams.set("created-before",e.createdBefore),e.createdAfter&&a.searchParams.set("created-after",e.createdAfter),e.sortBy&&a.searchParams.set("sort-by",e.sortBy),e.sortDir&&a.searchParams.set("sort-dir",e.sortDir),e.group&&a.searchParams.set("group",e.group),await this.request(a)}catch(e){throw new Error(e)}}async getGroup(e){try{const a=new URL(`/api/groups/${e.id}`,this._baseURL);return await this.request(a)}catch(e){throw new Error(e)}}async deleteGroup(e){try{const a=new URL(`/api/groups/${e.id}`,this._baseURL);return await this.request(a,{method:"DELETE"})}catch(e){throw new Error(e)}}async patchGroup({id:e,patch:a}){try{const r=new URL(`/api/groups/${e}`,this._baseURL);return await this.request(r,{method:"PATCH",body:JSON.stringify(t({},a))},{"Content-Type":"application/json"})}catch(e){throw new Error(e)}}}export{o as BallChasingAPI};
//# sourceMappingURL=ballchasing.modern.js.map
