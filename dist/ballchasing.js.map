{"version":3,"file":"ballchasing.js","sources":["../node_modules/form-data/lib/browser.js","../src/BallChasingAPI.ts"],"sourcesContent":["/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import fetch, {Response} from \"node-fetch\";\nimport * as fs from \"fs\";\nimport * as FormData from \"form-data\";\nimport {MatchResult, Playlist, Rank, SortBy, SortDir, Visibility} from \"./types\";\n\nexport interface ListReplaysArgs {\n    title?: string\n    playerName?: string\n    playerId?: string\n    playlist?: Playlist\n    season?: string\n    matchResult?: MatchResult\n    minRank?: Rank\n    maxRank?: Rank\n    pro?: boolean\n    uploader?: string\n    group?: string\n    // This is actually an enum from GET /maps\n    map?: string\n    // RFC3339 Format\n    createdBefore?: string\n    createdAfter?: string\n    replayDateAfter?: string\n    replayDateBefore?: string\n    count?: number\n    sortBy?: SortBy\n    sortDir?: SortDir\n}\n\nexport interface DeleteReplayArgs {\n    id: string\n}\n\nexport interface PatchReplayArgs {\n    id: string\n    // the patch data, for example, {\"title\":\"patched title\"}\n    patch: {\n        [key: string]: string\n    }\n}\n\nexport interface DownloadReplayArgs {\n    id: string\n}\n\nexport interface GetReplayArgs {\n    id: string\n}\n\nexport interface CreateGroupArgs {\n    name: string\n    parent?: string\n    playerIdentification: \"by-id\" | \"by-name\"\n    teamIdentification: \"by-distinct-players\" | \"by-player-clusters\"\n}\n\nexport interface ListGroupsArgs {\n    name?: string\n    creator?: string\n    group?: string\n    createdBefore?: string\n    createdAfter?: string\n    count?: number\n    sortBy?: SortBy\n    sortDir?: SortDir\n}\n\nexport interface DeleteGroupArgs {\n    id: string\n}\n\nexport interface PatchGroupArgs {\n    id: string\n    // the patch data, for example, {\"title\":\"patched title\"}\n    patch: {\n        [key: string]: string\n    }\n}\n\nexport interface GetGroupArgs {\n    id: string\n}\n\nexport class BallChasingAPI {\n\n    private readonly _apiKey;\n    private readonly _baseURL;\n\n    constructor(apiKey: string) {\n        this._apiKey = apiKey;\n        this._baseURL = new URL(\"https://ballchasing.com/api\")\n    }\n\n    /**\n     * Create the authorization headers needed to call the\n     * ballchasing API.\n     * @private\n     */\n    private authHeaders() {\n        return {\"Authorization\": this._apiKey};\n    }\n\n    /**\n     * Make a request to the ballchasing API. This method will\n     * check the response for errors.\n     * @param url\n     * @param fetchArgs Any extra fetch args\n     * @param headers Any extra headers\n     * @private\n     */\n    private async request(url: URL, fetchArgs?: RequestInit, headers?: HeadersInit) {\n        try {\n            const args: RequestInit = {\n                headers: {\n                    ...this.authHeaders(),\n                    ...headers\n                },\n                ...fetchArgs\n            }\n\n            // @ts-ignore\n            const res = await fetch(url, args);\n            const json = await res.json();\n\n            return {response: res, data: json};\n\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    /**\n     * Checks if\n     * 1) Your API key is correct\n     * 2) If ballchasing API is reachable\n     */\n    async ping() {\n        try {\n            return await this.request(this._baseURL);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Upload a replay\n     *\n     * @param filepath\n     * @param groupId\n     * @param visibility\n     */\n    async uploadReplay(filepath: string, groupId?: string, visibility?: Visibility) {\n        try {\n            const endpoint = new URL(\"/api/v2/upload\", this._baseURL);\n\n            if (visibility) {\n                endpoint.searchParams.set(\"visibility\", visibility);\n            }\n\n            if (groupId) {\n                endpoint.searchParams.set(\"group\", groupId);\n            }\n\n            const stats = fs.statSync(filepath);\n            const stream = fs.createReadStream(filepath);\n\n            const formData = new FormData();\n            formData.append(\"file\", stream, {knownLength: stats.size});\n\n            const args = {method: \"POST\", body: formData};\n\n            // @ts-ignore\n            return await this.request(endpoint, args);\n\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async getMaps() {\n        try {\n            const endpoint = new URL(\"/api/maps\", this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async listReplays(args: ListReplaysArgs) {\n        try {\n\n            const endpoint = new URL(\"/api/replays\", this._baseURL);\n\n            if (args.title) {\n                endpoint.searchParams.set(\"title\", args.title);\n            }\n\n            if (args.playerName) {\n                endpoint.searchParams.set(\"player-name\", args.playerName);\n            }\n\n            if (args.playerId) {\n                endpoint.searchParams.set(\"player-id\", args.playerId);\n            }\n\n            if (args.playlist) {\n                endpoint.searchParams.set(\"playlist\", args.playlist);\n            }\n\n            if (args.season) {\n                endpoint.searchParams.set(\"season\", args.season);\n            }\n\n            if (args.matchResult) {\n                endpoint.searchParams.set(\"match-result\", args.matchResult);\n            }\n\n            if (args.minRank) {\n                endpoint.searchParams.set(\"min-rank\", args.minRank);\n            }\n\n            if (args.maxRank) {\n                endpoint.searchParams.set(\"max-rank\", args.maxRank);\n            }\n\n            if (args.pro) {\n                endpoint.searchParams.set(\"pro\", \"true\");\n            }\n\n            if (args.uploader) {\n                endpoint.searchParams.set(\"uploader\", args.uploader);\n            }\n\n            if (args.group) {\n                endpoint.searchParams.set(\"group\", args.group);\n            }\n\n            if (args.map) {\n                endpoint.searchParams.set(\"map\", args.map);\n            }\n\n            if (args.createdBefore) {\n                endpoint.searchParams.set(\"created-before\", args.createdBefore);\n            }\n\n            if (args.createdAfter) {\n                endpoint.searchParams.set(\"created-after\", args.createdAfter);\n            }\n\n            if (args.replayDateBefore) {\n                endpoint.searchParams.set(\"replay-date-before\", args.replayDateBefore);\n            }\n\n            if (args.replayDateAfter) {\n                endpoint.searchParams.set(\"replay-date-after\", args.replayDateAfter);\n            }\n\n            if (args.count) {\n                endpoint.searchParams.set(\"count\", args.count.toString());\n            }\n\n            if (args.sortDir) {\n                endpoint.searchParams.set(\"sort-dir\", args.sortDir);\n            }\n\n            if (args.sortBy) {\n                endpoint.searchParams.set(\"sort-by\", args.sortBy);\n            }\n\n            return await this.request(endpoint);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    async getReplay(args: GetReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}`, this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async patchReplay({id, patch}: PatchReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${id}`, this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"PATCH\", body: JSON.stringify({...patch})},\n                {\"Content-Type\": \"application/json\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async deleteReplay(args: DeleteReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}`, this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"DELETE\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async downloadReplay(args: DownloadReplayArgs) {\n        try {\n            const endpoint = new URL(`/api/replays/${args.id}/file`, this._baseURL);\n            return await fetch(endpoint, {\n                headers: {\n                    ...this.authHeaders()\n                }\n            });\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async createGroup(args: CreateGroupArgs) {\n        try {\n            const endpoint = new URL(\"/api/groups\", this._baseURL);\n            return await this.request(\n                endpoint,\n                {method: \"POST\", body: JSON.stringify({...args})},\n                {\"Content-Type\": \"application/json\"}\n            );\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async listGroups(args: ListGroupsArgs = {}) {\n        try {\n            const endpoint = new URL(\"/api/groups\", this._baseURL);\n\n            if (args.name) {\n                endpoint.searchParams.set(\"name\", args.name);\n            }\n\n            if (args.count) {\n                endpoint.searchParams.set(\"count\", args.count.toString());\n            }\n\n            if (args.creator) {\n                endpoint.searchParams.set(\"creator\", args.creator);\n            }\n\n            if (args.createdBefore) {\n                endpoint.searchParams.set(\"created-before\", args.createdBefore);\n            }\n\n            if (args.createdAfter) {\n                endpoint.searchParams.set(\"created-after\", args.createdAfter);\n            }\n\n            if (args.sortBy) {\n                endpoint.searchParams.set(\"sort-by\", args.sortBy);\n            }\n\n            if (args.sortDir) {\n                endpoint.searchParams.set(\"sort-dir\", args.sortDir);\n            }\n\n            if (args.group) {\n                endpoint.searchParams.set(\"group\", args.group);\n            }\n\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async getGroup(args: GetGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${args.id}`, this._baseURL);\n            return await this.request(endpoint);\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async deleteGroup(args: DeleteGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${args.id}`, this._baseURL);\n            return await this.request(endpoint, {method: \"DELETE\"});\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n    async patchGroup({id, patch}: PatchGroupArgs) {\n        try {\n            const endpoint = new URL(`/api/groups/${id}`, this._baseURL);\n            return await this.request(endpoint, {\n                method: \"PATCH\",\n                body: JSON.stringify({...patch})\n            }, {\"Content-Type\": \"application/json\"});\n        } catch (e) {\n            throw new Error(e);\n        }\n    }\n\n}"],"names":["self","FormData","window","apiKey","this","_apiKey","_baseURL","URL","authHeaders","Authorization","request","url","fetchArgs","headers","args","_this2","fetch","res","json","response","data","e","Error","ping","_this4","uploadReplay","filepath","groupId","visibility","endpoint","_this6","searchParams","set","stats","fs","statSync","stream","createReadStream","formData","append","knownLength","size","method","body","getMaps","_this8","listReplays","_this10","title","playerName","playerId","playlist","season","matchResult","minRank","maxRank","pro","uploader","group","map","createdBefore","createdAfter","replayDateBefore","replayDateAfter","count","toString","sortDir","sortBy","getReplay","id","_this12","patchReplay","patch","_this14","JSON","stringify","Content-Type","deleteReplay","_this16","downloadReplay","_this18","createGroup","_this20","listGroups","_this22","name","creator","getGroup","_this24","deleteGroup","_this26","patchGroup","_this28"],"mappings":"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"}