!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("node-fetch"),require("fs")):"function"==typeof define&&define.amd?define(["exports","node-fetch","fs"],r):r((e||self).ballchasing={},e.nodeFetch,e.fs)}(this,function(e,r,t){function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function s(e){if(e&&e.__esModule)return e;var r=Object.create(null);return e&&Object.keys(e).forEach(function(t){if("default"!==t){var a=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,a.get?a:{enumerable:!0,get:function(){return e[t]}})}}),r.default=e,r}var o=a(r),n=s(t);function i(){return(i=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var c="object"==typeof self?self.FormData:window.FormData,u=Object.assign(Object.create(null),c,{default:c});function h(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}e.BallChasingAPI=function(){function e(e){this._apiKey=e,this._baseURL=new URL("https://ballchasing.com/api")}var r=e.prototype;return r.authHeaders=function(){return{Authorization:this._apiKey}},r.request=function(e,r,t){try{var a=this;return Promise.resolve(h(function(){var s=i({headers:i({},a.authHeaders(),t)},r);return Promise.resolve(o.default(e,s)).then(function(e){return Promise.resolve(e.json()).then(function(r){return{response:e,data:r}})})},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.ping=function(){try{var e=this;return Promise.resolve(h(function(){return Promise.resolve(e.request(e._baseURL))},function(e){throw e}))}catch(e){return Promise.reject(e)}},r.uploadReplay=function(e,r,t){try{var a=this;return Promise.resolve(h(function(){var s=new URL("/api/v2/upload",a._baseURL);t&&s.searchParams.set("visibility",t),r&&s.searchParams.set("group",r);var o=n.statSync(e),i=n.createReadStream(e),c=new u;return c.append("file",i,{knownLength:o.size}),Promise.resolve(a.request(s,{method:"POST",body:c}))},function(e){throw e}))}catch(e){return Promise.reject(e)}},r.getMaps=function(){try{var e=this;return Promise.resolve(h(function(){var r=new URL("/api/maps",e._baseURL);return Promise.resolve(e.request(r))},function(e){throw e}))}catch(e){return Promise.reject(e)}},r.listReplays=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/replays",r._baseURL);return e.title&&t.searchParams.set("title",e.title),e.playerName&&t.searchParams.set("player-name",e.playerName),e.playerId&&t.searchParams.set("player-id",e.playerId),e.playlist&&t.searchParams.set("playlist",e.playlist),e.season&&t.searchParams.set("season",e.season),e.matchResult&&t.searchParams.set("match-result",e.matchResult),e.minRank&&t.searchParams.set("min-rank",e.minRank),e.maxRank&&t.searchParams.set("max-rank",e.maxRank),e.pro&&t.searchParams.set("pro","true"),e.uploader&&t.searchParams.set("uploader",e.uploader),e.group&&t.searchParams.set("group",e.group),e.map&&t.searchParams.set("map",e.map),e.createdBefore&&t.searchParams.set("created-before",e.createdBefore),e.createdAfter&&t.searchParams.set("created-after",e.createdAfter),e.replayDateBefore&&t.searchParams.set("replay-date-before",e.replayDateBefore),e.replayDateAfter&&t.searchParams.set("replay-date-after",e.replayDateAfter),e.count&&t.searchParams.set("count",e.count.toString()),e.sortDir&&t.searchParams.set("sort-dir",e.sortDir),e.sortBy&&t.searchParams.set("sort-by",e.sortBy),Promise.resolve(r.request(t))},function(e){throw e}))}catch(e){return Promise.reject(e)}},r.getReplay=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/replays/"+e.id,r._baseURL);return Promise.resolve(r.request(t))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.patchReplay=function(e){var r=e.id,t=e.patch;try{var a=this;return Promise.resolve(h(function(){var e=new URL("/api/replays/"+r,a._baseURL);return Promise.resolve(a.request(e,{method:"PATCH",body:JSON.stringify(i({},t))},{"Content-Type":"application/json"}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.deleteReplay=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/replays/"+e.id,r._baseURL);return Promise.resolve(r.request(t,{method:"DELETE"}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.downloadReplay=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/replays/"+e.id+"/file",r._baseURL);return Promise.resolve(o.default(t,{headers:i({},r.authHeaders())}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.createGroup=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/groups",r._baseURL);return Promise.resolve(r.request(t,{method:"POST",body:JSON.stringify(i({},e))},{"Content-Type":"application/json"}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.listGroups=function(e){void 0===e&&(e={});try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/groups",r._baseURL);return e.name&&t.searchParams.set("name",e.name),e.count&&t.searchParams.set("count",e.count.toString()),e.creator&&t.searchParams.set("creator",e.creator),e.createdBefore&&t.searchParams.set("created-before",e.createdBefore),e.createdAfter&&t.searchParams.set("created-after",e.createdAfter),e.sortBy&&t.searchParams.set("sort-by",e.sortBy),e.sortDir&&t.searchParams.set("sort-dir",e.sortDir),e.group&&t.searchParams.set("group",e.group),Promise.resolve(r.request(t))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.getGroup=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/groups/"+e.id,r._baseURL);return Promise.resolve(r.request(t))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.deleteGroup=function(e){try{var r=this;return Promise.resolve(h(function(){var t=new URL("/api/groups/"+e.id,r._baseURL);return Promise.resolve(r.request(t,{method:"DELETE"}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},r.patchGroup=function(e){var r=e.id,t=e.patch;try{var a=this;return Promise.resolve(h(function(){var e=new URL("/api/groups/"+r,a._baseURL);return Promise.resolve(a.request(e,{method:"PATCH",body:JSON.stringify(i({},t))},{"Content-Type":"application/json"}))},function(e){throw new Error(e)}))}catch(e){return Promise.reject(e)}},e}()});
//# sourceMappingURL=ballchasing.umd.js.map
